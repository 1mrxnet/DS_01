library(stringr)
library(dplyr)
library(ggplot2)
library(moments)
library(knitr)
library(rvest)
ls("package:hoopR")
ls("package:nbastatR")
# -------------------------------
# Step 1: NBA Player IDs + Names
# -------------------------------
all_players <- nba_commonallplayers(is_only_current_season = 1, league_id = "00")
nba_ids <- all_players$CommonAllPlayers %>%
transmute(
Person_ID = as.character(PERSON_ID),
nba_name  = DISPLAY_FIRST_LAST
)
cat("NBA Players retrieved:", nrow(nba_ids), "\n")
# -------------------------------
# Step 2: Scrape ESPN Players (IDs + Names)
# -------------------------------
team_abbs <- c('atl','bkn','bos','cha','cle','chi','dal','den','det','gsw','hou',
'ind','lac','lal','mem','mia','mil','min','no','ny','okc','orl',
'phi','phx','por','sa','sac','tor','utah','wsh')
season <- format(Sys.Date(), "%Y")
urls <- paste0("https://www.espn.com/nba/team/stats/_/name/", team_abbs,
"/season/", season, "/seasontype/2")
espn_links_all <- lapply(urls, function(u) {
webpage <- tryCatch(read_html(u), error = function(e) return(NULL))
if (is.null(webpage)) return(NULL)
links <- webpage %>% html_nodes(xpath = "//td/span/a") %>% html_attr("href")
names <- webpage %>% html_nodes(xpath = "//td/span/a") %>% html_text()
data.frame(
espn_name = names,
espn_link = links,
stringsAsFactors = FALSE
)
})
# LONG TIME TO LOAD
espn_links_all <- do.call(rbind, espn_links_all) %>%
distinct(espn_link, .keep_all = TRUE) %>%
mutate(
athlete_id = str_extract(espn_link, "(?<=/id/)[0-9]+")
)
cat("ESPN Players scraped:", nrow(espn_links_all), "\n")
# -------------------------------
# Step 3: Exact Join (NBA ↔ ESPN by Name)
# -------------------------------
merged_exact <- nba_ids %>%
left_join(espn_links_all, by = c("nba_name" = "espn_name"))
cat("Exact matches:", sum(!is.na(merged_exact$athlete_id)), "\n")
# -------------------------------
# Step 4: Fetch ESPN Player Stats for 2025
# -------------------------------
recent_season = most_recent_nba_season()
# LONG TIME TO LOAD
player_stats_list <- lapply(merged_exact$athlete_id, function(id) {
tryCatch({
espn_nba_player_stats(athlete_id = id, recent_season)
}, error = function(e) {
message(paste("No data for athlete_id:", id))
NULL
})
})
print(recent_season)
print(class(recent_season))
# Combine All Stats into One DataFrame
all_stats <- bind_rows(player_stats_list)
write.csv(all_stats, "C:/MONASH/Y3 SEM-2/FIT3164/DS_01/website/nba-ranking-starter/R_backend/nba_all_stats.csv", row.names = FALSE)
all_stats
View(all_stats)
# -------------------------------
# Preview Results
# -------------------------------
head(all_stats)
dim(all_stats)
write.csv(all_stats, "nba_all_stats.csv")
all_stats_clean <- all_stats %>%
filter(general_minutes > 500 & general_games_played >10)
# Safe z-score helper
z <- function(x) {
s <- suppressWarnings(sd(x, na.rm = TRUE))
if (is.na(s) || s == 0) rep(0, length(x)) else as.numeric(scale(x))
}
# Weighted ranking
rank_players <- function(tbl,
# category weights (must sum ~1; we’ll normalize just in case)
w_cat = c(impact = 0.15, scoring = 0.23, play = 0.15,
reb = 0.16, disc = 0.12, def = 0.19),
# defence internal weights: steals vs blocks
w_def = c(stl = 0.6, blk = 0.4)) {
# normalize weights to be safe
w_cat <- w_cat / sum(w_cat, na.rm = TRUE)
w_def <- w_def / sum(w_def, na.rm = TRUE)
tbl %>%
# Pick 3 per section (as you specified)
mutate(
## Impact
impact_per        = general_per,
impact_plusminus  = general_plus_minus,
## Scoring
scoring_3p_pct    = offensive_three_point_pct,
scoring_2p_pct    = offensive_two_point_field_goal_pct,
scoring_points    = offensive_points,
true_shoot        = offensive_true_shooting_pct,
## Playmaking
play_ast          = offensive_assists,
play_ast48        = offensive_avg48assists,
## Rebounding
reb_off48         = offensive_avg48offensive_rebounds,
reb_def48         = defensive_avg48defensive_rebounds,
reb_def_rate      = defensive_def_rebound_rate,
reb_off_rate      = offensive_off_rebound_rate,
## Discipline (penalties)
disc_fouls48      = general_avg48fouls,
disc_turnovers    = offensive_turnovers,
disc_tov_rate     = offensive_turnover_ratio,
## Defence
def_blk48         = defensive_avg48blocks,
def_stl48         = defensive_avg48steals
) %>%
# Z-scores per stat
mutate(
Z_IMPACT  = rowMeans(cbind(z(impact_per), z(impact_plusminus)), na.rm = TRUE),
Z_SCORING = rowMeans(cbind(z(scoring_3p_pct), z(scoring_2p_pct), z(scoring_points), z(true_shoot)), na.rm = TRUE),
Z_PLAY    = rowMeans(cbind(z(play_ast), z(play_ast48)), na.rm = TRUE),
Z_REB     = rowMeans(cbind(z(reb_off48), z(reb_def48), z(reb_def_rate), z(reb_off_rate)), na.rm = TRUE),
Z_DISC    = rowMeans(cbind(-z(disc_fouls48), -z(disc_turnovers), -z(disc_tov_rate)), na.rm = TRUE), # lower is better
Z_DEF     = w_def["stl"] * z(def_stl48) + w_def["blk"] * z(def_blk48)
) %>%
# Weighted category blend
mutate(
score_total = w_cat["impact"] * Z_IMPACT +
w_cat["scoring"] * Z_SCORING +
w_cat["play"]   * Z_PLAY +
w_cat["reb"]    * Z_REB +
w_cat["disc"]   * Z_DISC +
w_cat["def"]    * Z_DEF
) %>%
arrange(desc(score_total)) %>%
mutate(rank = row_number(),
namePlayer = coalesce(full_name, display_name, short_name, slug)) %>%
select(rank, namePlayer, score_total,
Z_IMPACT, Z_SCORING, Z_PLAY, Z_REB, Z_DISC, Z_DEF)
}
# Run
res <- rank_players(all_stats_clean)
View(res)
write.csv(res, "C:/MONASH/Y3 SEM-2/FIT3164/DS_01/website/nba-ranking-starter/R_backend/ranking_model.csv", row.names = FALSE)
scale_logistic <- function(x, lower = 30, upper = 99) {
z <- scale(x)[,1]
p <- 1 / (1 + exp(-z))              # logistic in (0,1)
scaled <- p * (upper - lower) + lower
return(scaled)
}
res <- res %>%
mutate(
IMPACT_100  = scale_logistic(Z_IMPACT),
SCORING_100 = scale_logistic(Z_SCORING),
PLAY_100    = scale_logistic(Z_PLAY),
REB_100     = scale_logistic(Z_REB),
DISC_100    = scale_logistic(Z_DISC),
DEF_100     = scale_logistic(Z_DEF),
TOTAL_100   = scale_logistic(score_total)
) %>%
select(rank, namePlayer, starts_with("IMPACT_100"), starts_with("SCORING_100"),
starts_with("PLAY_100"), starts_with("REB_100"),
starts_with("DISC_100"), starts_with("DEF_100"), TOTAL_100)
View(res)
#Hot and Cold Streak
library(nbastatR)
ls("package:nbastatR")
library(dplyr)
library(zoo)
# ---------------------------------------------------------
# 1. Pull game logs (player-level, all games in 2025 season)
# ---------------------------------------------------------
# Increase buffer size for vroom (e.g., 10 MB)
Sys.setenv("VROOM_CONNECTION_SIZE" = 10 * 1024 * 1024)
# Now call game_logs again
logs <- game_logs(seasons = recent_season, league = "NBA")
logs <- game_logs(seasons = recent_season, league = "NBA", season_types = c("Regular Season", "Playoffs"))
View(logs)
# Inspect
glimpse(logs)
# ---------------------------------------------------------
# 1. Keep only relevant fields
# ---------------------------------------------------------
player_logs <- logs %>%
select(idPlayer, namePlayer, slugTeam, dateGame, pts, ast, treb, minutes) %>%
arrange(idPlayer, dateGame)
# ---------------------------------------------------------
# 2. Hot/Cold streak detection function
# ---------------------------------------------------------
detect_streaks <- function(df,
threshold_hot5 = 1.20, threshold_cold5 = 0.80,
threshold_hot10 = 1.15, threshold_cold10 = 0.85) {
if (nrow(df) < 5) return(NULL)
season_avg <- mean(df$pts, na.rm = TRUE)
df <- df %>%
mutate(
streak_pts5  = rollapply(pts, 5, mean, align = "right", fill = NA),
streak_pts10 = rollapply(pts, 10, mean, align = "right", fill = NA),
hot5   = streak_pts5  > season_avg * threshold_hot5,
cold5  = streak_pts5  < season_avg * threshold_cold5,
hot10  = streak_pts10 > season_avg * threshold_hot10,
cold10 = streak_pts10 < season_avg * threshold_cold10
)
# keep only most recent game for that player
latest <- df %>%
slice_tail(n = 1) %>%
select(idPlayer, namePlayer, slugTeam, dateGame, pts, ast, treb,
streak_pts5, streak_pts10,
hot5, cold5, hot10, cold10)
return(latest)
}
# ---------------------------------------------------------
# 3. Apply to every player
# ---------------------------------------------------------
league_streaks <- player_logs %>%
group_by(idPlayer) %>%
group_split() %>%
lapply(detect_streaks) %>%
bind_rows()
# ---------------------------------------------------------
# 4. Add a status label for dashboard
# ---------------------------------------------------------
streak_summary <- league_streaks %>%
mutate(
status = case_when(
hot5  ~ "On Fire (last 5)",
cold5 ~ "Cold (last 5)",
hot10 ~ "On Fire (last 10)",
cold10~ "Cold (last 10)",
TRUE  ~ "— Steady"
)
) %>%
arrange(desc(streak_pts5), desc(streak_pts10))
# ---------------------------------------------------------
# 5. Preview
# ---------------------------------------------------------
head(streak_summary, 10)
View(streak_summary)
write.csv(res, "ranking_model.csv")
# api.R
library(plumber)
library(dplyr)
# Enable CORS
#* @filter cors
function(req, res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization")
if (req$REQUEST_METHOD == "OPTIONS") {
res$status <- 200
return(list())
} else {
forward()
}
}
# Load ranking CSV
rankings <- read.csv("ranking_model.csv", stringsAsFactors = FALSE)
#* Get all rankings
#* @get /rankings
function() {
rankings
}
#* Get top N players
#* @param n:int
#* @get /rankings/top
function(n = 10) {
rankings %>% head(as.integer(n))
}
library(plumber)
pr("api.R") %>% pr_run(port = 8000)
library(plumber)
pr("api.R") %>% pr_run(port = 8000)
library(plumber)
pr("api.R") %>% pr_run(port = 8000)
# api.R
library(plumber)
library(dplyr)
# Enable CORS
#* @filter cors
function(req, res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "*")
if (req$REQUEST_METHOD == "OPTIONS") {
res$status <- 200
return(list())
} else {
forward()
}
}
# Load ranking CSV
rankings <- read.csv("ranking_model.csv", stringsAsFactors = FALSE)
#* Get all rankings
#* @get /rankings
function() {
rankings
}
#* Get top N players
#* @param n:int
#* @get /rankings/top
function(n = 10) {
rankings %>% head(as.integer(n))
}
library(plumber)
pr("api.R") %>% pr_run(port = 8000)
library(plumber)
pr("api.R") %>% pr_run(port = 8000)
pr("api.R") %>% pr_run(port = 8000)
library(plumber)
library(dplyr)
# Enable CORS
#* @filter cors
function(req, res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "*")
if (req$REQUEST_METHOD == "OPTIONS") {
res$status <- 200
return(list())
} else {
forward()
}
}
# Debug: print working directory
print(paste("Working dir:", getwd()))
# Load ranking CSV safely
csv_path <- file.path(getwd(), "ranking_model.csv")
if (!file.exists(csv_path)) {
stop(paste("CSV not found at:", csv_path))
}
rankings <- read.csv(csv_path, stringsAsFactors = FALSE)
#* Get all rankings
#* @get /rankings
function() {
rankings
}
#* Get top N players
#* @param n:int
#* @get /rankings/top
function(n = 10) {
head(rankings, as.integer(n))
}
pr("api.R") %>% pr_run(port = 8000)
C:/MONASH/Y3 SEM-2/FIT3164/DS_01/website/nba-ranking-starter/R_backend/ranking_model.csv
C:MONASH/Y3 SEM-2/FIT3164/DS_01/website/nba-ranking-starter/R_backend/ranking_model.csv
csv_path <- "C:/MONASH/Y3 SEM-2/FIT3164/DS_01/website/nba-ranking-starter/R_backend/ranking_model.csv"
library(plumber)
library(dplyr)
# Enable CORS
#* @filter cors
function(req, res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization")
if (req$REQUEST_METHOD == "OPTIONS") {
res$status <- 200
return(list())
} else {
forward()
}
}
# --- load data safely ---
csv_path <- "C:/MONASH/Y3 SEM-2/FIT3164/DS_01/website/nba-ranking-starter/R_backend/ranking_model.csv"
rankings <- tryCatch({
read.csv(csv_path, stringsAsFactors = FALSE)
}, error = function(e) {
message("Error loading file: ", e$message)
NULL
})
#* @get /rankings
function() {
if (is.null(rankings)) {
return(list(error = paste("Could not load file at:", csv_path)))
}
rankings
}
#* @param n:int
#* @get /rankings/top
function(n = 10) {
if (is.null(rankings)) {
return(list(error = paste("Could not load file at:", csv_path)))
}
head(rankings, as.integer(n))
}
pr("api.R") %>% pr_run(port = 8000)
# api.R
library(plumber)
library(dplyr)
# Path to your CSV (adjust if needed)
csv_path <- "C:/MONASH/Y3 SEM-2/FIT3164/DS_01/website/nba-ranking-starter/R_backend/ranking_model.csv"
# Load rankings safely
rankings <- tryCatch({
read.csv(csv_path, stringsAsFactors = FALSE)
}, error = function(e) {
message("❌ Error loading file: ", e$message)
NULL
})
# Enable CORS
#* @filter cors
function(req, res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization")
if (req$REQUEST_METHOD == "OPTIONS") {
res$status <- 200
return(list())
} else {
plumber::forward()   # ✅ correct forward usage
}
}
# Health check
#* @get /hello
function() {
list(status = "ok", msg = "API is working 🚀")
}
# Debug endpoint: check file + columns
#* @get /check
function() {
if (is.null(rankings)) {
return(list(error = paste("Could not load file at:", csv_path)))
}
list(
nrows = nrow(rankings),
ncols = ncol(rankings),
colnames = colnames(rankings),
preview = head(rankings, 5)
)
}
#* Get all rankings
#* @get /rankings
function() {
if (is.null(rankings)) {
return(list(error = "Rankings not loaded. Check CSV path."))
}
rankings
}
#* Get top N players
#* @param n:int Number of players
#* @get /rankings/top
function(n = 10) {
if (is.null(rankings)) {
return(list(error = "Rankings not loaded. Check CSV path."))
}
rankings %>% head(as.integer(n))
}
library(plumber)
pr("api.R") %>% pr_run(port = 8000)
# api.R
library(plumber)
library(dplyr)
# Path to your CSV (adjust if needed)
csv_path <- "C:/MONASH/Y3 SEM-2/FIT3164/DS_01/website/nba-ranking-starter/R_backend/ranking_model.csv"
# Load rankings safely
rankings <- tryCatch({
read.csv(csv_path, stringsAsFactors = FALSE)
}, error = function(e) {
message("❌ Error loading file: ", e$message)
NULL
})
# Enable CORS
#* @filter cors
function(req, res, ...) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization")
if (req$REQUEST_METHOD == "OPTIONS") {
res$status <- 200
return(list())
}
forward()   # ✅ works because ... is passed through
}
# Health check
#* @get /hello
function() {
list(status = "ok", msg = "API is working 🚀")
}
# Debug endpoint: check file + columns
#* @get /check
function() {
if (is.null(rankings)) {
return(list(error = paste("Could not load file at:", csv_path)))
}
list(
nrows = nrow(rankings),
ncols = ncol(rankings),
colnames = colnames(rankings),
preview = head(rankings, 5)
)
}
#* Get all rankings
#* @get /rankings
function() {
if (is.null(rankings)) {
return(list(error = "Rankings not loaded. Check CSV path."))
}
rankings
}
#* Get top N players
#* @param n:int Number of players
#* @get /rankings/top
function(n = 10) {
if (is.null(rankings)) {
return(list(error = "Rankings not loaded. Check CSV path."))
}
rankings %>% head(as.integer(n))
}
pr("api.R") %>% pr_run(port = 8000)
