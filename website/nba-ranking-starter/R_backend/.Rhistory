# Rankings endpoint
# ------------------------------
#* @get /rankings
function(limit = 360) {
rankings %>%
transmute(
rank,
namePlayer,
team = team_abbreviation,
pos  = position_abbreviation,
headshot_href,
score = round(TOTAL_100, 1)
) %>%
head(as.numeric(limit))
}
# ------------------------------
# Compare endpoint (with all stats)
# ------------------------------
#* @get /compare
function(player1 = "", player2 = "", player3 = "", player4 = "") {
players <- c(player1, player2, player3, player4)
players <- players[players != ""]   # remove empty
rankings %>%
filter(namePlayer %in% players) %>%
left_join(
stats %>%
select(
player_name,
IMPACT_100, SCORING_100, PLAY_100,
REB_100, DISC_100, DEF_100, TOTAL_100
),
by = c("namePlayer" = "player_name")
) %>%
transmute(
rank,
namePlayer,
team  = team_abbreviation,
pos   = position_abbreviation,
headshot_href,
score      = round(TOTAL_100, 1),
impact     = round(IMPACT_100, 1),
scoring    = round(SCORING_100, 1),
playmaking = round(PLAY_100, 1),
rebounding = round(REB_100, 1),
discipline = round(DISC_100, 1),
defense    = round(DEF_100, 1)
)
}
library(plumber)
pr("api.R") %>% pr_run(port = 8000)
library(plumber)
library(dplyr)
# Enable CORS
#* @filter cors
cors <- function(req, res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization")
if (req$REQUEST_METHOD == "OPTIONS") {
return(list())
} else {
forward()
}
}
# ------------------------------
# Load CSV (only one source)
# ------------------------------
stats <- read.csv("nba_player_comparison.csv")
# ------------------------------
# Rankings endpoint
# ------------------------------
#* @get /rankings
function(limit = 360) {
stats %>%
transmute(
rank,
namePlayer   = player_name,
team,
pos          = position,
headshot_href,
score        = round(TOTAL_100, 1)
) %>%
head(as.numeric(limit))
}
# ------------------------------
# Compare endpoint
# ------------------------------
#* @get /compare
function(player1 = "", player2 = "", player3 = "", player4 = "") {
players <- c(player1, player2, player3, player4)
players <- players[players != ""]
stats %>%
filter(player_name %in% players) %>%
transmute(
rank,
namePlayer   = player_name,
team,
pos          = position,
headshot_href,
score        = round(TOTAL_100, 1),
impact       = round(IMPACT_100, 1),
scoring      = round(SCORING_100, 1),
playmaking   = round(PLAY_100, 1),
rebounding   = round(REB_100, 1),
discipline   = round(DISC_100, 1),
defense      = round(DEF_100, 1)
)
}
pr("api.R") %>% pr_run(port = 8000)
colnames(stats)
library(plumber)
library(dplyr)
# Enable CORS
#* @filter cors
cors <- function(req, res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization")
if (req$REQUEST_METHOD == "OPTIONS") {
return(list())
} else {
forward()
}
}
# ------------------------------
# Load CSV (use only stats for everything)
# ------------------------------
stats <- read.csv("nba_player_comparison.csv")
# ------------------------------
# Rankings endpoint (from stats)
# ------------------------------
#* @get /rankings
function(limit = 360) {
stats %>%
transmute(
rank,
namePlayer = player_name,
team,
pos        = position,
headshot_href,
score      = round(TOTAL_100, 1)
) %>%
head(as.numeric(limit))
}
# ------------------------------
# Compare endpoint (from stats)
# ------------------------------
#* @get /compare
function(player1 = "", player2 = "", player3 = "", player4 = "") {
players <- c(player1, player2, player3, player4)
players <- players[players != ""]
stats %>%
filter(player_name %in% players) %>%
transmute(
rank,
namePlayer   = player_name,
team,
pos          = position,
headshot_href,
score        = round(TOTAL_100, 1),
impact       = round(IMPACT_100, 1),
scoring      = round(SCORING_100, 1),
playmaking   = round(PLAY_100, 1),
rebounding   = round(REB_100, 1),
discipline   = round(DISC_100, 1),
defense      = round(DEF_100, 1)
)
}
pr("api.R") %>% pr_run(port = 8000)
library(plumber)
library(dplyr)
# ------------------------------
# Enable CORS
# ------------------------------
#* @filter cors
cors <- function(req, res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization")
if (req$REQUEST_METHOD == "OPTIONS") {
return(list())
} else {
forward()
}
}
# ------------------------------
# Load CSVs
# ------------------------------
rankings <- read.csv("ranking_model.csv")
stats    <- read.csv("nba_player_comparison.csv")
# ------------------------------
# Rankings endpoint
# ------------------------------
#* @get /rankings
function(limit = 360) {
rankings %>%
transmute(
rank,
namePlayer,
team = team_abbreviation,
pos  = position_abbreviation,
headshot_href,
score = round(TOTAL_100, 1)
) %>%
head(as.numeric(limit))
}
# ------------------------------
# Compare endpoint (with all stats)
# ------------------------------
#* @get /compare
function(player1 = "", player2 = "", player3 = "", player4 = "") {
players <- c(player1, player2, player3, player4)
players <- players[players != ""]   # remove empty
rankings %>%
filter(namePlayer %in% players) %>%
left_join(
stats %>%
select(
player_name,
IMPACT_100, SCORING_100, PLAY_100,
REB_100, DISC_100, DEF_100, TOTAL_100
),
by = c("namePlayer" = "player_name")
) %>%
transmute(
rank,
namePlayer,
team  = team_abbreviation,
pos   = position_abbreviation,
headshot_href,
score      = round(TOTAL_100, 1),
impact     = round(IMPACT_100, 1),
scoring    = round(SCORING_100, 1),
playmaking = round(PLAY_100, 1),
rebounding = round(REB_100, 1),
discipline = round(DISC_100, 1),
defense    = round(DEF_100, 1)
)
}
pr("api.R") %>% pr_run(port = 8000)
library(plumber)
library(dplyr)
# Enable CORS
#* @filter cors
cors <- function(req, res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization")
if (req$REQUEST_METHOD == "OPTIONS") {
return(list())
} else {
forward()
}
}
# ------------------------------
# Load CSVs
# ------------------------------
rankings <- read.csv("ranking_model.csv")
stats    <- read.csv("nba_player_comparison.csv")
# ------------------------------
# Rankings endpoint
# ------------------------------
#* @get /rankings
function(limit = 360) {
rankings %>%
transmute(
rank,
namePlayer,
team = team_abbreviation,
pos  = position_abbreviation,
headshot_href,
score = round(TOTAL_100, 1)
) %>%
head(as.numeric(limit))
}
# ------------------------------
# Compare endpoint
# ------------------------------
#* @get /compare
function(player1 = "", player2 = "", player3 = "", player4 = "") {
players <- c(player1, player2, player3, player4)
players <- players[players != ""]
stats %>%
filter(namePlayer %in% players) %>%
transmute(
rank,
namePlayer,
team,
pos,
headshot_href,
score = round(score, 1),
impact,
scoring,
playmaking,
rebounding,
discipline,
defense
)
}
pr("api.R") %>% pr_run(port = 8000)
library(plumber)
library(dplyr)
# ------------------------------
# Enable CORS
# ------------------------------
#* @filter cors
cors <- function(req, res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization")
if (req$REQUEST_METHOD == "OPTIONS") {
return(list())
} else {
forward()
}
}
# ------------------------------
# Load CSVs
# ------------------------------
rankings <- read.csv("ranking_model.csv")
stats    <- read.csv("nba_player_comparison.csv")
# ------------------------------
# Rankings endpoint
# ------------------------------
#* @get /rankings
function(limit = 360) {
rankings %>%
transmute(
rank,
namePlayer,
team = team_abbreviation,
pos  = position_abbreviation,
headshot_href,
score = round(TOTAL_100, 1)
) %>%
head(as.numeric(limit))
}
# ------------------------------
# Compare endpoint (with all stats)
# ------------------------------
#* @get /compare
function(player1 = "", player2 = "", player3 = "", player4 = "") {
players <- c(player1, player2, player3, player4)
players <- players[players != ""]   # remove empty
rankings %>%
filter(namePlayer %in% players) %>%
left_join(
stats %>%
select(
player_name,
IMPACT_100, SCORING_100, PLAY_100,
REB_100, DISC_100, DEF_100, TOTAL_100
),
by = c("namePlayer" = "player_name")
) %>%
transmute(
rank,
namePlayer,
team  = team_abbreviation,
pos   = position_abbreviation,
headshot_href,
score      = round(TOTAL_100, 1),
impact     = round(IMPACT_100, 1),
scoring    = round(SCORING_100, 1),
playmaking = round(PLAY_100, 1),
rebounding = round(REB_100, 1),
discipline = round(DISC_100, 1),
defense    = round(DEF_100, 1)
)
}
pr("api.R") %>% pr_run(port = 8000)
library(plumber)
library(dplyr)
# ------------------------------
# Enable CORS
# ------------------------------
#* @filter cors
cors <- function(req, res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization")
if (req$REQUEST_METHOD == "OPTIONS") {
return(list())
} else {
forward()
}
}
# ------------------------------
# Load CSVs
# ------------------------------
rankings <- read.csv("ranking_model.csv")
stats    <- read.csv("nba_player_comparison.csv")
# ------------------------------
# Rankings endpoint (merge in headshot from stats)
# ------------------------------
#* @get /rankings
function(limit = 360) {
rankings %>%
left_join(
stats %>% select(player_name, headshot_href),
by = c("namePlayer" = "player_name")
) %>%
transmute(
rank,
namePlayer,
team = team_abbreviation,
pos  = position_abbreviation,
headshot_href,
score = round(TOTAL_100, 1)
) %>%
head(as.numeric(limit))
}
# ------------------------------
# Compare endpoint (with all stats)
# ------------------------------
#* @get /compare
function(player1 = "", player2 = "", player3 = "", player4 = "") {
players <- c(player1, player2, player3, player4)
players <- players[players != ""]   # remove empty
rankings %>%
filter(namePlayer %in% players) %>%
left_join(
stats %>%
select(
player_name, headshot_href,
IMPACT_100, SCORING_100, PLAY_100,
REB_100, DISC_100, DEF_100, TOTAL_100
),
by = c("namePlayer" = "player_name")
) %>%
transmute(
rank,
namePlayer,
team  = team_abbreviation,
pos   = position_abbreviation,
headshot_href,
score      = round(TOTAL_100, 1),
impact     = round(IMPACT_100, 1),
scoring    = round(SCORING_100, 1),
playmaking = round(PLAY_100, 1),
rebounding = round(REB_100, 1),
discipline = round(DISC_100, 1),
defense    = round(DEF_100, 1)
)
}
pr("api.R") %>% pr_run(port = 8000)
library(plumber)
library(dplyr)
# ------------------------------
# Enable CORS
# ------------------------------
#* @filter cors
cors <- function(req, res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization")
if (req$REQUEST_METHOD == "OPTIONS") {
return(list())
} else {
forward()
}
}
# ------------------------------
# Load CSVs
# ------------------------------
rankings <- read.csv("ranking_model.csv")
stats    <- read.csv("nba_player_comparison.csv")
# ------------------------------
# Rankings endpoint
# ------------------------------
#* @get /rankings
function(limit = 360) {
rankings %>%
left_join(
stats %>% select(player_name, headshot_href),
by = c("namePlayer" = "player_name")
) %>%
transmute(
rank,
namePlayer,
team = team_abbreviation,
pos  = position_abbreviation,
headshot_href,                       # ✅ comes from stats now
score = round(TOTAL_100, 1)          # ✅ comes from ranking_model.csv
) %>%
head(as.numeric(limit))
}
# ------------------------------
# Compare endpoint
# ------------------------------
#* @get /compare
function(player1 = "", player2 = "", player3 = "", player4 = "") {
players <- c(player1, player2, player3, player4)
players <- players[players != ""]
stats %>%
filter(player_name %in% players) %>%
transmute(
rank,
namePlayer = player_name,            # ✅ rename to match frontend
team,
pos = position,
headshot_href,
score      = round(TOTAL_100, 1),
impact     = round(IMPACT_100, 1),
scoring    = round(SCORING_100, 1),
playmaking = round(PLAY_100, 1),
rebounding = round(REB_100, 1),
discipline = round(DISC_100, 1),
defense    = round(DEF_100, 1)
)
}
pr("api.R") %>% pr_run(port = 8000)
