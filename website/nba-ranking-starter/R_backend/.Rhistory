# Corrected plot function
plot(xValues, pdf_s1, type = "l", col = "red", lwd = 2,
ylim = c(0, max(pdf_s1, pdf_s2)),
xlab = "x", ylab = "p(X= x | s)",
main = "Probability Density Function of X for s = 1 and s = 2")
# Add the second line for s = 2
lines(xValues, pdf_s2, col = "yellow", lwd = 2)
# Create legend
legend("topright", legend = c("s=1", "s=2"), col = c("red", "yellow"), lwd = 2)
# Define the PDF function
pdf <- function(x, s) {
if (0 <= x & x <= s) {
return((6 / (4 * s)) * (1 - (x / s)^2))
} else {
return(0)
}
}
# Values for x in the range [0, 2]
xValues <- seq(0, 2, length.out = 400)
# Calculate the PDF for s=1 and s=2
pdf_s1 <- sapply(xValues, pdf, s = 1)
pdf_s2 <- sapply(xValues, pdf, s = 2)
# Corrected plot function
plot(xValues, pdf_s1, type = "l", col = "red", lwd = 2,
ylim = c(0, max(pdf_s1, pdf_s2)),
xlab = "x", ylab = "p(X= x | s)",
main = "Probability Density Function of X for s = 1 and s = 2")
# Add the second line for s = 2
lines(xValues, pdf_s2, col = "yellow", lwd = 2)
# Create legend
legend("topright", legend = c("s=1", "s=2"), col = c("red", "yellow"), lwd = 2)
# Define the PDF function
pdf_function <- function(x, s) {
ifelse(x >= 0 & x <= s, (6 / (4 * s)) * (1 - (x/s)^2), 0)
}
# Generate the PDF plot for s = 1 and s = 2
x_values <- seq(0, 2, length.out = 100)
pdf_s1 <- sapply(x_values, pdf_function, s = 1)
pdf_s2 <- sapply(x_values, pdf_function, s = 2)
# Plotting
plot(x_values, pdf_s1, type = 'l', col = 'blue', lwd = 2, ylim = c(0, max(pdf_s1, pdf_s2)),
ylab = "Density", xlab = "x", main = "PDF for s = 1 and s = 2")
lines(x_values, pdf_s2, col = 'red', lwd = 2)
# Define the PDF function
pdf_function <- function(x, s) {
ifelse(x >= 0 & x <= s, (6 / (4 * s)) * (1 - (x/s)^2), 0)
}
# Generate the PDF plot for s = 1 and s = 2
x_values <- seq(0, 2, length.out = 100)
pdf_s1 <- sapply(x_values, pdf_function, s = 1)
pdf_s2 <- sapply(x_values, pdf_function, s = 2)
# Plotting
plot(x_values, pdf_s1, type = 'l', col = 'blue', lwd = 2, ylim = c(0, max(pdf_s1, pdf_s2)),
ylab = "Density", xlab = "x", main = "PDF for s = 1 and s = 2")
lines(x_values, pdf_s2, col = 'red', lwd = 2)
# Adjust margins if needed
par(mar = c(5, 5, 4, 2) + 0.1)
# Define the PDF function
pdf_function <- function(x, s) {
ifelse(x >= 0 & x <= s, (6 / (4 * s)) * (1 - (x/s)^2), 0)
}
# Generate the PDF plot for s = 1 and s = 2
x_values <- seq(0, 2, length.out = 100)
pdf_s1 <- sapply(x_values, pdf_function, s = 1)
pdf_s2 <- sapply(x_values, pdf_function, s = 2)
# Plotting
plot(x_values, pdf_s1, type = 'l', col = 'blue', lwd = 2, ylim = c(0, max(pdf_s1, pdf_s2)),
ylab = "Density", xlab = "x", main = "PDF for s = 1 and s = 2")
lines(x_values, pdf_s2, col = 'red', lwd = 2)
legend("topright", legend = c("s = 1", "s = 2"), col = c("blue", "red"), lwd = 2)
# Reset graphics device (this can help clear the issue)
dev.off()
# Define the PDF function
pdf_function <- function(x, s) {
ifelse(x >= 0 & x <= s, (6 / (4 * s)) * (1 - (x/s)^2), 0)
}
# Generate the PDF plot for s = 1 and s = 2
x_values <- seq(0, 2, length.out = 100)
pdf_s1 <- sapply(x_values, pdf_function, s = 1)
pdf_s2 <- sapply(x_values, pdf_function, s = 2)
# Save the plot to a file instead of displaying it
png(filename = "pdf_plot.png", width = 800, height = 600)
# Adjust margins if needed
par(mar = c(5, 5, 4, 2) + 0.1)
# Plotting
plot(x_values, pdf_s1, type = 'l', col = 'blue', lwd = 2, ylim = c(0, max(pdf_s1, pdf_s2)),
ylab = "Density", xlab = "x", main = "PDF for s = 1 and s = 2")
lines(x_values, pdf_s2, col = 'red', lwd = 2)
legend("topright", legend = c("s = 1", "s = 2"), col = c("blue", "red"), lwd = 2)
# Close the graphics device
dev.off()
# Reset graphics device (this can help clear the issue)
dev.off()
# Define the PDF function
pdf_function <- function(x, s) {
ifelse(x >= 0 & x <= s, (6 / (4 * s)) * (1 - (x/s)^2), 0)
}
# Generate the PDF plot for s = 1 and s = 2
x_values <- seq(0, 2, length.out = 100)
pdf_s1 <- sapply(x_values, pdf_function, s = 1)
pdf_s2 <- sapply(x_values, pdf_function, s = 2)
# Save the plot to a file instead of displaying it
png(filename = "pdf_plot.png", width = 800, height = 600)
# Adjust margins if needed
par(mar = c(5, 5, 4, 2) + 0.1)
# Plotting
plot(x_values, pdf_s1, type = 'l', col = 'blue', lwd = 2, ylim = c(0, max(pdf_s1, pdf_s2)),
ylab = "Density", xlab = "x", main = "PDF for s = 1 and s = 2")
lines(x_values, pdf_s2, col = 'red', lwd = 2)
# Reset graphics device (this can help clear the issue)
dev.off()
# Define the PDF function
pdf_function <- function(x, s) {
ifelse(x >= 0 & x <= s, (6 / (4 * s)) * (1 - (x/s)^2), 0)
}
# Generate the PDF plot for s = 1 and s = 2
x_values <- seq(0, 2, length.out = 100)
pdf_s1 <- sapply(x_values, pdf_function, s = 1)
pdf_s2 <- sapply(x_values, pdf_function, s = 2)
# Save the plot to a file instead of displaying it
png(filename = "pdf_plot.png", width = 800, height = 600)
# Adjust margins if needed
par(mar = c(5, 5, 4, 2) + 0.1)
# Plotting
plot(x_values, pdf_s1, type = 'l', col = 'blue', lwd = 2, ylim = c(0, max(pdf_s1, pdf_s2)),
ylab = "Density", xlab = "x", main = "PDF for s = 1 and s = 2")
lines(x_values, pdf_s2, col = 'red', lwd = 2)
legend("topright", legend = c("s = 1", "s = 2"), col = c("blue", "red"), lwd = 2)
# Close the graphics device
dev.off()
#Question 4
#part 1
# Define the PDF function
pdf_function <- function(x, s) {
ifelse(x >= 0 & x <= s, (6 / (4 * s)) * (1 - (x/s)^2), 0)
}
# Generate the PDF plot for s = 1 and s = 2
xValues <- seq(0, 2, length.out = 100)
pdf_s1 <- sapply(x_values, pdf_function, s = 1)
pdf_s2 <- sapply(x_values, pdf_function, s = 2)
# Save the plot to a file
png(filename = "pdf_plot.png", width = 800, height = 600)
# Adjust margins if needed
par(mar = c(5, 5, 4, 2) + 0.1)
# Plotting
plot(x_values, pdf_s1, type = 'l', col = 'blue', lwd = 2, ylim = c(0, max(pdf_s1, pdf_s2)),
ylab = "Density", xlab = "x", main = "PDF for s = 1 and s = 2")
lines(x_values, pdf_s2, col = 'red', lwd = 2)
legend("topright", legend = c("s = 1", "s = 2"), col = c("blue", "red"), lwd = 2)
#Question 4
#part 1
# Define the PDF function
pdf_function <- function(x, s) {
ifelse(x >= 0 & x <= s, (6 / (4 * s)) * (1 - (x/s)^2), 0)
}
# Generate the PDF plot for s = 1 and s = 2
xValues <- seq(0, 2, length.out = 100)
pdf_s1 <- sapply(x_values, pdf_function, s = 1)
pdf_s2 <- sapply(x_values, pdf_function, s = 2)
# Save the plot to a file
png(filename = "pdf_plot.png", width = 800, height = 600)
# Adjust margins if needed
par(mar = c(5, 5, 4, 2) + 0.1)
# Plotting
plot(x_values, pdf_s1, type = 'l', col = 'blue', lwd = 2, ylim = c(0, max(pdf_s1, pdf_s2)),
ylab = "p(X = x | s)", xlab = "x", main = "PDF of X for s = 1 and s = 2")
lines(x_values, pdf_s2, col = 'red', lwd = 2)
legend("topright", legend = c("s = 1", "s = 2"), col = c("blue", "red"), lwd = 2)
#Question 4
#part 1
# Define the PDF function
pdf_function <- function(x, s) {
ifelse(x >= 0 & x <= s, (6 / (4 * s)) * (1 - (x/s)^2), 0)
}
# Generate the PDF plot for s = 1 and s = 2
xValues <- seq(0, 2, length.out = 100)
pdf_s1 <- sapply(x_values, pdf_function, s = 1)
pdf_s2 <- sapply(x_values, pdf_function, s = 2)
# Save the plot to a file
png(filename = "pdf_plot.png", width = 800, height = 600)
# Adjust margins if needed
par(mar = c(5, 5, 4, 2) + 0.1)
# Plotting
plot(x_values, pdf_s1, type = 'l', col = 'blue', lwd = 2, ylim = c(0, max(pdf_s1, pdf_s2)),
ylab = "p(X = x | s)", xlab = "x", main = "PDF of X for s = 1 and s = 2")
lines(x_values, pdf_s2, col = 'red', lwd = 2)
legend("topright", legend = c("s = 1", "s = 2"), col = c("blue", "red"), lwd = 2)
#Question 4
#part 1
# Define the PDF function
pdf_function <- function(x, s) {
ifelse(x >= 0 & x <= s, (6 / (4 * s)) * (1 - (x/s)^2), 0)
}
# Generate the PDF plot for s = 1 and s = 2
xValues <- seq(0, 2, length.out = 100)
pdf_s1 <- sapply(x_values, pdf_function, s = 1)
pdf_s2 <- sapply(x_values, pdf_function, s = 2)
# Save the plot to a file
png(filename = "part1plot.png", width = 800, height = 600)
# Adjust margins if needed
par(mar = c(5, 5, 4, 2) + 0.1)
# Plotting
plot(x_values, pdf_s1, type = 'l', col = 'blue', lwd = 2, ylim = c(0, max(pdf_s1, pdf_s2)),
ylab = "p(X = x | s)", xlab = "x", main = "PDF of X for s = 1 and s = 2")
lines(x_values, pdf_s2, col = 'red', lwd = 2)
legend("topright", legend = c("s = 1", "s = 2"), col = c("blue", "red"), lwd = 2)
#Question 4
#part 1
# Define the PDF function
pdf_function <- function(x, s) {
ifelse(x >= 0 & x <= s, (6 / (4 * s)) * (1 - (x/s)^2), 0)
}
# Generate the PDF plot for s = 1 and s = 2
xValues <- seq(0, 2, length.out = 100)
pdf_s1 <- sapply(xValues, pdf_function, s = 1)
pdf_s2 <- sapply(xValues, pdf_function, s = 2)
# Save the plot to a file
png(filename = "part1plot.png", width = 800, height = 600)
# Adjust margins if needed
par(mar = c(5, 5, 4, 2) + 0.1)
# Plotting
plot(xValues, pdf_s1, type = 'l', col = 'blue', lwd = 2, ylim = c(0, max(pdf_s1, pdf_s2)),
ylab = "p(X = x | s)", xlab = "x", main = "PDF of X for s = 1 and s = 2")
lines(xValues, pdf_s2, col = 'red', lwd = 2)
legend("topright", legend = c("s = 1", "s = 2"), col = c("blue", "red"), lwd = 2)
# Define the PDF function (same as before)
pdf_function <- function(x, s) {
ifelse(x >= 0 & x <= s, (6 / (4 * s)) * (1 - (x/s)^2), 0)
}
# Define the CDF function
cdf_function <- function(x, s) {
integrate(pdf_function, lower = 0, upper = x, s = s)$value
}
# Generate the CDF plot for s = 1 over x in [0, 1]
xValuescdf <- seq(0, 1, length.out = 100)
cdf_s1 <- sapply(xValuescdf, cdf_function, s = 1)
# Plotting
plot(xValuescdf, cdf_s1, type = 'l', col = 'blue', lwd = 2,
ylab = "CDF", xlab = "x", main = "CDF for s = 1")
# Find the median (value of x where CDF = 0.5)
median_approx <- xValuescdf[which.min(abs(cdf_s1 - 0.5))]
median_approx
# Define the PDF function (same as before)
pdf_function <- function(x, s) {
ifelse(x >= 0 & x <= s, (6 / (4 * s)) * (1 - (x/s)^2), 0)
}
# Define the CDF function
cdf_function <- function(x, s) {
integrate(pdf_function, lower = 0, upper = x, s = s)$value
}
# Generate the CDF plot for s = 1 over x in [0, 1]
xValuescdf <- seq(0, 1, length.out = 100)
cdf_s1 <- sapply(xValuescdf, cdf_function, s = 1)
# Save the plot to a file
png(filename = "part6q4plot.png", width = 800, height = 600)
# Adjust margins if needed
par(mar = c(5, 5, 4, 2) + 0.1)
# Plotting the CDF
plot(xValuescdf, cdf_s1, type = 'l', col = 'blue', lwd = 2,
ylab = "CDF", xlab = "x", main = "CDF for s = 1")
# Find the median (value of x where CDF = 0.5)
median_approx <- xValuescdf[which.min(abs(cdf_s1 - 0.5))]
# Add a vertical line at the median
abline(v = median_approx, col = "red", lwd = 2, lty = 2)  # Dashed red line
# Annotate the plot with the median value
text(median_approx, 0.5, paste0("Median ≈ ", round(median_approx, 3)),
pos = 4, col = "red", cex = 0.8)
# Close the graphics device
dev.off()
# Print the median value
median_approx
# Define the PDF function (same as before)
pdf_function <- function(x, s) {
ifelse(x >= 0 & x <= s, (6 / (4 * s)) * (1 - (x/s)^2), 0)
}
# Define the CDF function
cdf_function <- function(x, s) {
integrate(pdf_function, lower = 0, upper = x, s = s)$value
}
# Generate the CDF plot for s = 1 over x in [0, 1]
xValuescdf <- seq(0, 1, length.out = 100)
cdf_s1 <- sapply(xValuescdf, cdf_function, s = 1)
# Save the plot to a file
png(filename = "6q4plot.png", width = 800, height = 600)
# Adjust margins if needed
par(mar = c(5, 5, 4, 2) + 0.1)
# Plotting the CDF
plot(xValuescdf, cdf_s1, type = 'l', col = 'blue', lwd = 2,
ylab = "CDF", xlab = "x", main = "CDF for s = 1")
# Find the median (value of x where CDF = 0.5)
median_approx <- xValuescdf[which.min(abs(cdf_s1 - 0.5))]
# Add a vertical line at the median
abline(v = median_approx, col = "red", lwd = 2, lty = 2)  # Dashed red line
# Annotate the plot with the median value
text(median_approx, 0.5, paste0("Median ≈ ", round(median_approx, 3)),
pos = 4, col = "red", cex = 0.8)
# Close the graphics device
dev.off()
# Print the median value
median_approx
# Read the data from the CSV file
dog_bites <- read.csv("dogbites.1997.csv", header = FALSE)$V1
# Calculate the mean, which is the maximum likelihood estimate of λ
lambda_hat <- mean(dog_bites)
lambda_hat
# (a) Probability of 3 or fewer admissions
prob_3_or_less <- ppois(3, lambda = lambda_hat)
setwd("C:/MONASH/Y3 SEM-2/FIT3164/DS_01/website/nba-ranking-starter/R_backend")
library(plumber)
library(dplyr)
# ------------------------------
# Enable CORS
# ------------------------------
#* @filter cors
cors <- function(req, res) {
res$setHeader("Access-Control-Allow-Origin", "*")
res$setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
res$setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization")
if (req$REQUEST_METHOD == "OPTIONS") {
return(list())
} else {
forward()
}
}
# ------------------------------
# Load CSVs
# ------------------------------
rankings <- read.csv("ranking_model.csv")
stats    <- read.csv("nba_player_comparison.csv")
# ------------------------------
# Rankings endpoint (DYNAMIC STAT FILTER)
# ------------------------------
#* @get /rankings
#* @param limit:number The number of players to return
#* @param stat The metric to rank players by (TOTAL_100, IMPACT_100, SCORING_100, PLAY_100, REB_100, DISC_100, DEF_100)
function(limit = 360, stat = "TOTAL_100") {
# Valid stat names
valid_stats <- c("TOTAL_100", "IMPACT_100", "SCORING_100", "PLAY_100", "REB_100", "DISC_100", "DEF_100")
# Default to TOTAL_100 if invalid
if (!(stat %in% valid_stats)) stat <- "TOTAL_100"
# Join rankings with stats
merged <- rankings %>%
left_join(
stats %>%
select(player_name, headshot_href, intersect(valid_stats, names(stats))),
by = c("namePlayer" = "player_name")
)
# 🧠 If TOTAL_100 missing, calculate it dynamically
if (!"TOTAL_100" %in% names(merged)) {
cols <- intersect(c("IMPACT_100", "SCORING_100", "PLAY_100", "REB_100", "DISC_100", "DEF_100"), names(merged))
merged <- merged %>%
mutate(TOTAL_100 = rowMeans(select(., all_of(cols)), na.rm = TRUE))
}
# Mutate, arrange, and return top N players
merged %>%
mutate(score = round(.data[[stat]], 1)) %>%
arrange(desc(score)) %>%
transmute(
rank = row_number(),
namePlayer,
team = team_abbreviation,
pos = position_abbreviation,
headshot_href,
score
) %>%
head(as.numeric(limit))
}
# ------------------------------
# Compare endpoint
# ------------------------------
#* @get /compare
function(player1 = "", player2 = "", player3 = "", player4 = "") {
players <- c(player1, player2, player3, player4)
players <- players[players != ""]
stats %>%
filter(player_name %in% players) %>%
transmute(
rank,
namePlayer = player_name,
team,
pos = position,
headshot_href,
score      = round(TOTAL_100, 1),
impact     = round(IMPACT_100, 1),
scoring    = round(SCORING_100, 1),
playmaking = round(PLAY_100, 1),
rebounding = round(REB_100, 1),
discipline = round(DISC_100, 1),
defense    = round(DEF_100, 1)
)
}
# ------------------------------
# Trends endpoint
# ------------------------------
trend5  <- read.csv("nba_trends_page_5.csv")
trend10 <- read.csv("nba_trends_page_10.csv")
#* @get /trends
function(range = 5, limit = 10) {
range <- as.numeric(range)
data <- if (range == 10) trend10 else trend5
data[is.na(data)] <- 0
hot <- data %>%
arrange(desc(if (range == 10) streak_total10 else streak_total5)) %>%
head(as.numeric(limit)) %>%
transmute(
player_name,
team,
position,
headshot_href,
streak_value = round(if (range == 10) streak_total10 else streak_total5, 1)
)
cold <- data %>%
arrange(if (range == 10) streak_total10 else streak_total5) %>%
head(as.numeric(limit)) %>%
transmute(
player_name,
team,
position,
headshot_href,
streak_value = round(if (range == 10) streak_total10 else streak_total5, 1)
)
return(list(hot = hot, cold = cold))
}
pr <- plumber::plumb("api.R")
pr$run(port = 8000)
